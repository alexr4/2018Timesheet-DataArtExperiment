//from = https://www.shadertoy.com/view/lsSfz1

// This is a variation on a regular 2-pass Voronoi traversal that produces a Voronoi
// pattern based on the interior cell point to the nearest cell edge (as opposed
// to the nearest offset point). It's a slight reworking of Tomkh's example, which
// in turn, is based on IQ's original example. The links are below:
//
// On a side note, I have no idea whether a faster solution is possible, but when I
// have time, I'm going to attempt to find one anyway.
//
// Voronoi distances - iq
// https://www.shadertoy.com/view/ldl3W8
//
// Here's IQ's well written article that describes the process in more detail.
// http://www.iquilezles.org/www/articles/voronoilines/voronoilines.htm
//
// Faster Voronoi Edge Distance - tomkh
// https://www.shadertoy.com/view/llG3zy
vec2 Voronoi(in vec2 p){

    // One of Tomkh's snippets that includes a wrap to deal with
    // larger numbers, which is pretty cool.

#if 1
    // Slower, but handles big numbers better.
    vec2 n = floor(p);
    p -= n;
    vec2 h = step(.5, p) - 1.5;
    n += h; p -= h;
#else
    vec2 n = floor(p - 1.);
    p -= n;
#endif

    // Storage for all sixteen hash values. The same set of hash values are
    // reused in the second pass, and since they're reasonably expensive to
    // calculate, I figured I'd save them from resuse. However, I could be
    // violating some kind of GPU architecture rule, so I might be making
    // things worse... If anyone knows for sure, feel free to let me know.
    //
    // I've been informed that saving to an array of vectors is worse.
    //vec2 svO[3];

    // Individual Voronoi cell ID. Used for coloring, materials, etc.
    cellID = vec2(0); // Redundant initialization, but I've done it anyway.

    // As IQ has commented, this is a regular Voronoi pass, so it should be
    // pretty self explanatory.
    //
    // First pass: Regular Voronoi.
	vec2 mo, o;

    // Minimum distance, "smooth" distance to the nearest cell edge, regular
    // distance to the nearest cell edge, and a line distance place holder.
    float md = 8., lMd = 8., lMd2 = 8., lnDist, d;

    for( int j=0; j<3; j++ )
    for( int i=0; i<3; i++ ){

        o = vec2(i, j);
        o += hash22(n + o) - p;
        // Saving the hash values for reuse in the next pass. I don't know for sure,
        // but I've been informed that it's faster to recalculate the had values in
        // the following pass.
        //svO[j*3 + i] = o;

        // Regular squared cell point to nearest node point.
        d = dot(o, o);

        if( d<md ){

            md = d;  // Update the minimum distance.
            // Keep note of the position of the nearest cell point - with respect
            // to "p," of course. It will be used in the second pass.
            mo = o;
            cellID = vec2(i, j) + n; // Record the cell ID also.
        }

    }


    // Second pass: Distance to closest border edge. The closest edge will be one of the edges of
    // the cell containing the closest cell point, so you need to check all surrounding edges of
    // that cell, hence the second pass... It'd be nice if there were a faster way.
    for( int j=0; j<3; j++ )
    for( int i=0; i<3; i++ ){

        // I've been informed that it's faster to recalculate the hash values, rather than
        // access an array of saved values.
        o = vec2(i, j);
        o += hash22(n + o) - p;
        // I went through the trouble to save all sixteen expensive hash values in the first
        // pass in the hope that it'd speed thing up, but due to the evolving nature of
        // modern architecture that likes everything to be declared locally, I might be making
        // things worse. Who knows? I miss the times when lookup tables were a good thing. :)
        //
        //o = svO[j*3 + i];

        // Skip the same cell... I found that out the hard way. :D
        if( dot(o-mo, o-mo)>.00001 ){

            // This tiny line is the crux of the whole example, believe it or not. Basically, it's
            // a bit of simple trigonometry to determine the distance from the cell point to the
            // cell border line. See IQ's article for a visual representation.
            lnDist = dot( 0.5*(o+mo), normalize(o-mo));

            // Abje's addition. Border distance using a smooth minimum. Insightful, and simple.
            //
            // On a side note, IQ reminded me that the order in which the polynomial-based smooth
            // minimum is applied effects the result. However, the exponentional-based smooth
            // minimum is associative and commutative, so is more correct. In this particular case,
            // the effects appear to be negligible, so I'm sticking with the cheaper polynomial-based
            // smooth minimum, but it's something you should keep in mind. By the way, feel free to
            // uncomment the exponential one and try it out to see if you notice a difference.
            //
            // // Polynomial-based smooth minimum.
            lMd = smin(lMd, lnDist, .15);
            //
            // Exponential-based smooth minimum. By the way, this is here to provide a visual reference
            // only, and is definitely not the most efficient way to apply it. To see the minor
            // adjustments necessary, refer to Tomkh's example here: Rounded Voronoi Edges Analysis -
            // https://www.shadertoy.com/view/MdSfzD
            //lMd = sminExp(lMd, lnDist, 20.);

            // Minimum regular straight-edged border distance. If you only used this distance,
            // the web lattice would have sharp edges.
            lMd2 = min(lMd2, lnDist);
        }

    }

    // Return the smoothed and unsmoothed distance. I think they need capping at zero... but
    // I'm not positive.
    return max(vec2(lMd, lMd2), 0.);
}
